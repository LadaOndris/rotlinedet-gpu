
#include "../include/linedet.hpp"
#include <iostream>
#include <openacc.h>

void readImage(const std::string &imagePath, cv::Mat &image) {
    cv::Mat img = cv::imread(imagePath);
    image = img;
}

void convertBgrToGray(const cv::Mat &inImage, cv::Mat &outImage) {
    cv::cvtColor(inImage, outImage, cv::COLOR_BGR2GRAY);
}

void removeExtremeIntensities(const cv::Mat &inImage, cv::Mat &outImage) {
    outImage = inImage;
//
//    cv::Mat reshaped = inImage.reshape(1, 1);
//    auto begin = reshaped.begin<cv::uint8_t>();
//    auto end = reshaped.end<cv::uint8_t>();
//    auto center = begin + reshaped.total() / 2;
//    std::nth_element(begin, center, end);
//    std::cout << "\nThe median is " << reshaped.total() << '\n';
//    std::cout << "\nThe median is " << reshaped.at<cv::uint8_t>(reshaped.total() / 2) << '\n';
}

void convolveAverage(float **acc, int filterSize,
                     float **result) {
    // Convolve each image rotation
    for (int rot = 0; rot < NUM_ROTATIONS; rot++) {
        // Do the 1D convolution itself
        int halfFilterSize = filterSize / 2;
        for (int i = halfFilterSize; i < ACC_SIZE - halfFilterSize; i++) {
            // Sum values
            int firstConvIndex = i - halfFilterSize;
            for (int h = firstConvIndex; h < firstConvIndex + filterSize; h++) {
                result[rot][i] += acc[rot][h];
            }
            // Compute average by dividing by the number of values
            result[rot][i] /= filterSize;
        }
    }
}

void extractPeaks(float **acc,
                  float **average,
                  float **peaks) {
    // diff = acc - average
    // peaks = max(0, diff)
    for (int rot = 0; rot < NUM_ROTATIONS; rot++) {
        for (int col = 0; col < ACC_SIZE; col++) {
            float val = std::max(acc[rot][col], average[rot][col]);
            peaks[rot][col] = val - average[rot][col];
        }
    }
}

/**
 *
 * @param array
 *  The array on which the slopes are computed.
 * @param sideDistance
 *  Determines the distance between the values for which the
 *  slope is computed. It measures the distance from the center position to
 *  each side. E.g., windowSize = 2 indicates that
 *  the slope for index 2 will be computed between the 0th and the 4nd value.
 *  For index 5 it will be the 3rd and the 7th.
 */
void extractSlopes(float **array,
                   int sideDistance,
                   float **slopes) {
    for (int rot = 0; rot < NUM_ROTATIONS; rot++) {
        for (int col = 0; col < sideDistance; col++) {
            slopes[rot][col] = std::numeric_limits<float>::max();
        }
        for (int col = sideDistance; col < ACC_SIZE - sideDistance; col++) {
            float left = array[rot][col - sideDistance];
            float right = array[rot][col + sideDistance];
            float bigger = std::max(left, right);
            float smaller = std::min(left, right);
            slopes[rot][col] = bigger - smaller;
        }
        for (int col = ACC_SIZE - sideDistance; col < ACC_SIZE; col++) {
            slopes[rot][col] = std::numeric_limits<float>::max();
        }
    }
}

void selectPeaksUsingSlopes(float **peaks,
                            float **slopes,
                            float slopeThreshold,
                            float **selectedPeaks) {
    // Selects peak with the highest peak value above certain slope threshold
    // for each rotation
    for (int rot = 0; rot < NUM_ROTATIONS; rot++) {
        selectedPeaks[rot][0] = 0; // col
        selectedPeaks[rot][1] = 0; // peakValue

        float sum_peaks_below_threshold = 0;

        for (int col = 0; col < ACC_SIZE; col++) {
            if (slopes[rot][col] < slopeThreshold) {
                sum_peaks_below_threshold += peaks[rot][col];

                if (selectedPeaks[rot][1] < peaks[rot][col]) {
                    selectedPeaks[rot][0] = col;
                    selectedPeaks[rot][1] = peaks[rot][col];
                }
            }
        }
        float mean_peak_below_threshold = sum_peaks_below_threshold / ACC_SIZE;
        selectedPeaks[rot][1] /= mean_peak_below_threshold;
    }
}

// 440 ms
void sumColumns(const unsigned char img[IMG_HEIGHT][IMG_WIDTH],
                const float rotations[NUM_ROTATIONS][2],
                unsigned int **acc) {

#pragma acc data copyin(img[:IMG_HEIGHT][:IMG_WIDTH])
    for (int rot = 0; rot < NUM_ROTATIONS; rot++) {
        auto acc_rot = acc[rot];
        auto rotation_col = rotations[rot][0];
        auto rotation_row = rotations[rot][1];
        {
#pragma acc parallel loop copy(acc_rot[:ACC_SIZE]) vector_length(512)
            for (int row = 0; row < IMG_HEIGHT; row++) {
#pragma acc loop
                for (int col = 0; col < IMG_WIDTH; col++) {

                    int col_shifted = col - HALF_IMG_WIDTH;
                    int row_shifted = row - HALF_IMG_HEIGHT;
                    float new_col_shifted = col_shifted * rotation_col + row_shifted * rotation_row;
                    int new_col = new_col_shifted + HALF_ACC_SIZE;
#pragma acc atomic update
                    acc_rot[new_col] += img[row][col];
                }
            }
        }
    }
}

/**
 * The image is rotated by predefined angles.
 *
 * The following angles of rotations are generated using scripts/rotations.py.
 *
 */
float rotations[NUM_ROTATIONS][2] = {
        { 1.0, 0.0 },
        { 0.9999703331993876, 0.007702773598251528 },
        { 0.9998813345577882, 0.01540509016320605 },
        { 0.9997330093558119, 0.023106492688683998 },
        { 0.999525366394127, 0.03080652422273904 },
        { 0.9992584179929382, 0.038504727894770725 },
        { 0.9989321799912556, 0.046200646942632234 },
        { 0.9985466717459546, 0.0538938247397317 },
        { 0.9981019161306276, 0.061583804822125575 },
        { 0.997597939534227, 0.06927013091560222 },
        { 0.9970347718594993, 0.07695234696275431 },
        { 0.9964124465212106, 0.08462999715003838 },
        { 0.9957310004441645, 0.0923026259348199 },
        { 0.9949904740610106, 0.09996977807240218 },
        { 0.9941909113098462, 0.10763099864303775 },
        { 0.9933323596316086, 0.1152858330789204 },
        { 0.9924148699672607, 0.12293382719115624 },
        { 0.9914384967547685, 0.13057452719671248 },
        { 0.9904032979258707, 0.13820747974534187 },
        { 0.9893093349026418, 0.14583223194648176 },
        { 0.9881566725938478, 0.15344833139612557 },
        { 0.9869453793910942, 0.1610553262036657 },
        { 0.985675527164769, 0.16865276501870569 },
        { 0.9843471912597778, 0.17624019705784058 },
        { 0.9829604504910734, 0.18381717213140342 },
        { 0.9815153871389797, 0.1913832406701767 },
        { 0.9800120869443093, 0.19893795375206694 },
        { 0.9784506391032765, 0.20648086312874073 },
        { 0.9768311362622049, 0.21401152125222103 },
        { 0.9751536745120299, 0.22152948130144184 },
        { 0.9734183533825986, 0.2290342972087595 },
        { 0.9716252758367625, 0.23652552368641974 },
        { 0.9697745482642699, 0.24400271625297804 },
        { 0.9678662804754523, 0.25146543125967236 },
        { 0.9659005856947099, 0.2589132259167465 },
        { 0.963877580553793, 0.2663456583197222 },
        { 0.9617973850848819, 0.27376228747561915 },
        { 0.9596601227134648, 0.28116267332912054 },
        { 0.9574659202510151, 0.28854637678868333 },
        { 0.9552149078874668, 0.2959129597525908 },
        { 0.9529072191834896, 0.303261985134947 },
        { 0.9505429910625651, 0.31059301689161056 },
        { 0.9481223638028616, 0.31790562004606654 },
        { 0.9456454810289119, 0.3251993607152356 },
        { 0.9431124897030905, 0.33247380613521726 },
        { 0.9405235401168948, 0.339728524686968 },
        { 0.937878785882027, 0.3469630859219103 },
        { 0.9351783839212804, 0.35417706058747256 },
        { 0.932422494459228, 0.36137002065255897 },
        { 0.9296112810127162, 0.3685415393329453 },
        { 0.9267449103811625, 0.37569119111660204 },
        { 0.9238235526366589, 0.3828185517889413 },
        { 0.920847381113881, 0.38992319845798723 },
        { 0.917816572399803, 0.39700470957946743 },
        { 0.9147313063232205, 0.404062664981825 },
        { 0.9115917659440806, 0.4110966458911487 },
        { 0.9083981375426203, 0.4181062349560201 },
        { 0.9051506106083135, 0.425091016272277 },
        { 0.9018493778286283, 0.4320505754076901 },
        { 0.898494635077594, 0.4389844994265529 },
        { 0.8950865814041792, 0.44589237691418276 },
        { 0.8916254190204816, 0.4527737980013315 },
        { 0.8881113532897298, 0.4596283543885046 },
        { 0.8845445927140985, 0.46645563937018664 },
        { 0.8809253489223374, 0.4732552478589732 },
        { 0.8772538366572143, 0.48002677640960567 },
        { 0.8735302737627739, 0.4867698232429093 },
        { 0.8697548811714123, 0.49348398826963225 },
        { 0.8659278828907676, 0.5001688731141845 },
        { 0.86204950599043, 0.506824081138274 },
        { 0.8581199805884676, 0.513449217464442 },
        { 0.8541395398377739, 0.5200438889994919 },
        { 0.850108419912233, 0.5266077044578124 },
        { 0.846026859992707, 0.5331402743845944 },
        { 0.8418951022528445, 0.5396412111789393 },
        { 0.8377133918447117, 0.5461101291168554 },
        { 0.8334819768842464, 0.5525466443741456 },
        { 0.8292011084365364, 0.5589503750491803 },
        { 0.8248710405009231, 0.5653209411855574 },
        { 0.8204920299959307, 0.5716579647946459 },
        { 0.8160643367440223, 0.5779610698780142 },
        { 0.8115882234561836, 0.5842298824497388 },
        { 0.8070639557163355, 0.5904640305585945 },
        { 0.8024918019655758, 0.5966631443101234 },
        { 0.797872033486252, 0.602826855888582 },
        { 0.7932049243858647, 0.6089547995787657 },
        { 0.7884907515808042, 0.6150466117877071 },
        { 0.7837297947799199, 0.6211019310662499 },
        { 0.778922336467924, 0.6271203981304948 },
        { 0.7740686618886308, 0.633101655883117 },
        { 0.7691690590280323, 0.639045349434554 },
        { 0.764223818597211, 0.6449511261240631 },
        { 0.7592332340150902, 0.6508186355406452 },
        { 0.7541976013910258, 0.6566475295438363 },
        { 0.7491172195072355, 0.6624374622843641 },
        { 0.7439923898010724, 0.6681880902246681 },
        { 0.7388234163471382, 0.6738990721592836 },
        { 0.7336106058392429, 0.6795700692350856 },
        { 0.7283542675722062, 0.6852007449713952 },
        { 0.7230547134235069, 0.6907907652799437 },
        { 0.7177122578347777, 0.6963397984846951 },
        { 0.7123272177931476, 0.7018475153415261 },
        { 0.7068999128124354, 0.7073135890577611 },
        { 0.7014306649141903, 0.712737695311562 },
        { 0.6959197986085862, 0.7181195122711712 },
        { 0.690367640875167, 0.7234587206140074 },
        { 0.6847745211434454, 0.7287550035456121 },
        { 0.6791407712733574, 0.7340080468184456 },
        { 0.6734667255355709, 0.7392175387505332 },
        { 0.6677527205916531, 0.7443831702439582 },
        { 0.661999095474095, 0.7495046348032013 },
        { 0.6562061915661946, 0.7545816285533267 },
        { 0.6503743525818027, 0.7596138502580118 },
        { 0.6445039245449274, 0.7646010013374208 },
        { 0.6385952557692054, 0.7695427858859201 },
        { 0.6326486968372335, 0.7744389106896361 },
        { 0.6266646005797678, 0.7792890852438523 },
        { 0.6206433220547896, 0.7840930217702455 },
        { 0.6145852185264377, 0.7888504352339618 },
        { 0.6084906494438108, 0.7935610433605277 },
        { 0.6023599764196408, 0.7982245666525992 },
        { 0.596193563208836, 0.802840728406545 },
        { 0.5899917756868989, 0.8074092547288643 },
        { 0.5837549818282171, 0.8119298745524381 },
        { 0.5774835516842305, 0.8164023196526127 },
        { 0.5711778573614742, 0.8208263246631138 },
        { 0.5648382729995007, 0.8252016270917923 },
        { 0.5584651747486805, 0.8295279673361988 },
        { 0.5520589407478836, 0.8338050886989864 },
        { 0.5456199511020439, 0.8380327374031418 },
        { 0.5391485878596048, 0.8422106626070427 },
        { 0.532645234989853, 0.8463386164193409 },
        { 0.5261102783601337, 0.8504163539136713 },
        { 0.5195441057129578, 0.8544436331431833 },
        { 0.5129471066429949, 0.8584202151548972 },
        { 0.5063196725739567, 0.8623458640038818 },
        { 0.49966219673537376, 0.8662203467672533 },
        { 0.49297507413926256, 0.870043433557997 },
        { 0.48625870155668854, 0.8738148975386053 },
        { 0.4795134774942241, 0.8775345149345387 },
        { 0.47273980217030415, 0.8812020650475019 },
        { 0.465938077491479, 0.8848173302685388 },
        { 0.45910870702856815, 0.8883800960909448 },
        { 0.4522520959927159, 0.891890151122993 },
        { 0.4453686512113467, 0.895347287100478 },
        { 0.4384587811040285, 0.8987512988990723 },
        { 0.4315228956582387, 0.9021019845464973 },
        { 0.4245614064050384, 0.9053991452345069 },
        { 0.41757472639465504, 0.9086425853306838 },
        { 0.4105632701719739, 0.9118321123900467 },
        { 0.40352745375194293, 0.9149675371664688 },
        { 0.39646769459488773, 0.918048673623907 },
        { 0.38938441158174286, 0.9210753389474391 },
        { 0.382278024989198, 0.924047353554112 },
        { 0.3751489564647613, 0.9269645411035962 },
        { 0.3679976290017418, 0.9298267285086488 },
        { 0.36082446691415115, 0.9326337459453837 },
        { 0.3536298958115286, 0.9353854268633478 },
        { 0.34641434257368675, 0.9380816079954027 },
        { 0.339178235325384, 0.9407221293674123 },
        { 0.33192200341092226, 0.9433068343077345 },
        { 0.3246460773686724, 0.9458355694565171 },
        { 0.31735088890552865, 0.9483081847747972 },
        { 0.31003687087129395, 0.9507245335534035 },
        { 0.30270445723299816, 0.953084472421661 },
        { 0.2953540830491479, 0.9553878613558983 },
        { 0.28798618444391383, 0.9576345636877546 },
        { 0.28060119858125365, 0.9598244461122898 },
        { 0.2731995636389736, 0.9619573786958934 },
        { 0.26578171878272977, 0.9640332348839941 },
        { 0.25834810413997056, 0.9660518915085685 },
        { 0.2508991607738233, 0.9680132287954495 },
        { 0.24343533065692302, 0.9699171303714326 },
        { 0.23595705664518946, 0.971763483271181 },
        { 0.2284647824515507, 0.973552177943928 },
        { 0.22095895261961598, 0.9752831082599771 },
        { 0.21344001249729946, 0.9769561715169993 },
        { 0.20590840821039577, 0.9785712684461265 },
        { 0.19836458663611065, 0.9801283032178415 },
        { 0.19080899537654492, 0.981627183447664 },
};

/**
* Each column of a rotated image contains a certain number of
* pixels from the original image. The following array contains
* these counts.
* Different image sizes have a different pixel counts.
*
*  The following nonzero-pixel counts are generated using scripts/rotations.py.
*/
//#ifdef HD
//float columnPixelCounts[NUM_ROTATIONS][ACC_SIZE] = {
//
//};
//#else
//float columnPixelCounts[NUM_ROTATIONS][ACC_SIZE] = {
//
//};
//#endif